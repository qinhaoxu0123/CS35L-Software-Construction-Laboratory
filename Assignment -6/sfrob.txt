{\rtf1\ansi\ansicpg1252\cocoartf1504
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 AndaleMono;\f2\fnil\fcharset134 PingFangSC-Regular;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;}
{\*\expandedcolortbl;\csgray\c100000;\csgenericrgb\c0\c0\c0;\csgenericrgb\c100000\c100000\c100000;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
I will run both buffered and unbuffered versions in comparison with the strobe buffered version on inputs of varying numbers of input lines to measure any differences in performance between them.\
I will write a C++ program to generate 10, 100,1000,10000, 100000 lines and then test them in sfrob, sfrobu and sfrobs:\
\
10 lines:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf2 \cb3 \CocoaLigature0 time ./sfrobs.sh < input_cp.txt\
real	0m0.007s\
user	0m0.001s\
sys	0m0.006s\
\
time ./sfrobu < input_cp.txt\
real	0m0.002s\
user	0m0.000s\
sys	0m0.001s\
\
time ./sfrob < input_cp.txt\
real	0m0.002s\
user	0m0.001s\
sys	0m0.001s\
\
100 lines:\
time ./sfrobs.sh < input_cp.txt\
real	0m0.005s\
user	0m0.003s\
sys	0m0.004s\
\
time ./sfrobu < input_cp.txt\
real	0m0.002s\
user	0m0.000s\
sys	0m0.001s\
\
time ./sfrob < input_cp.txt\
real	0m0.002s\
user	0m0.000s\
sys	0m0.001s\
\
1000 line
\f2 s:\

\f1 time ./sfrobs.sh < input_cp.txt
\f2 \

\f1 real	0m0.005s\
user	0m0.002s\
sys	0m0.006s\
\
time ./sfrobu < input_cp.txt\
real	0m0.002s\
user	0m0.000s\
sys	0m0.002s\
\
time ./sfrob < input_cp.txt\
real	0m0.002s\
user	0m0.001s\
sys	0m0.000s\
\
10000 lines:\
time ./sfrobs.sh < input_cp.txt\
real	0m0.027s\
user	0m0.015s\
sys	0m0.013s\
\
time ./sfrobu < input_cp.txt\
real	0m0.031s\
user	0m0.008s\
sys	0m0.021s\
\
time ./sfrob < input_cp.txt\
real	0m0.029s\
user	0m0.015s\
sys	0m0.012s\
\
100000 lines:\
time ./sfrobs.sh < input_cp.txt\
real	0m0.348s\
user	0m0.164s\
sys	0m0.071s\
\
time ./sfrobu < input_cp.txt\
real	0m0.341s\
user	0m0.088s\
sys	0m0.237s\
\
time ./sfrob < input_cp.txt\
real	0m0.337s\
user	0m0.172s\
sys	0m0.153s\
\
The sfrob buffered version has less times in sys call, because sfrob has less time in kernel mode and requires less sys call in general. One thing we can notice is that in real and user times, sfrobu tends to have less times in general than sfrobu when the number of lines is increasing. This can be the reason that sfrobu has more interactive with the kernel mode in the sys call. Instead of stdin and stdout, the method is faster and efficiently in real and user times, which it does not need to allocate memory every time when it reads in characters. \
\
sfrobu:\
number of lines      comparisons\
10                  64\
100					1087	\
1000               15916\
10000			    207346\
100000				2568461\
\
we can see that when number of lines increasing by 10x of its original NOL, there number of comparison are grow very fast\
By linear regression method:\
f(x)=11.37x - 49.67 \
where x stands for number of lines \
The correlation coefficient 0.9998, which conforms that numbers of of lines is strongly related to the number of comparisons. \
\
\
\
\
\

\f0 \cf0 \cb1 \CocoaLigature1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  }